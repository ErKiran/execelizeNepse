package neweb

import (
	"context"
	"nepse-backend/nepse"
	"net/http"
)

type ListedStocks []struct {
	Securityid          string      `json:"securityId"`
	Securityname        string      `json:"securityName"`
	Symbol              string      `json:"symbol"`
	Indexid             int         `json:"indexId"`
	Openprice           float64     `json:"openPrice"`
	Highprice           float64     `json:"highPrice"`
	Lowprice            float64     `json:"lowPrice"`
	Totaltradequantity  int         `json:"totalTradeQuantity"`
	Lasttradedprice     float64     `json:"lastTradedPrice"`
	Percentagechange    float64     `json:"percentageChange"`
	Lastupdateddatetime string      `json:"lastUpdatedDateTime"`
	Lasttradedvolume    interface{} `json:"lastTradedVolume"`
	Previousclose       float64     `json:"previousClose"`
}

type Autogenerated struct {
	Totalamount int     `json:"totalAmount"`
	Totalqty    float64 `json:"totalQty"`
	Floorsheets struct {
		Content []struct {
			ID               interface{} `json:"id"`
			Contractid       int64       `json:"contractId"`
			Contracttype     interface{} `json:"contractType"`
			Stocksymbol      string      `json:"stockSymbol"`
			Buyermemberid    string      `json:"buyerMemberId"`
			Sellermemberid   string      `json:"sellerMemberId"`
			Contractquantity int         `json:"contractQuantity"`
			Contractrate     float64     `json:"contractRate"`
			Contractamount   float64     `json:"contractAmount"`
			Businessdate     string      `json:"businessDate"`
			Tradebookid      int         `json:"tradeBookId"`
			Stockid          int         `json:"stockId"`
			Buyerbrokername  string      `json:"buyerBrokerName"`
			Sellerbrokername string      `json:"sellerBrokerName"`
			Tradetime        string      `json:"tradeTime"`
			Securityname     string      `json:"securityName"`
		} `json:"content"`
		Pageable struct {
			Sort struct {
				Sorted   bool `json:"sorted"`
				Unsorted bool `json:"unsorted"`
				Empty    bool `json:"empty"`
			} `json:"sort"`
			Pagesize   int  `json:"pageSize"`
			Pagenumber int  `json:"pageNumber"`
			Offset     int  `json:"offset"`
			Paged      bool `json:"paged"`
			Unpaged    bool `json:"unpaged"`
		} `json:"pageable"`
		Totalpages       int  `json:"totalPages"`
		Totalelements    int  `json:"totalElements"`
		Last             bool `json:"last"`
		Number           int  `json:"number"`
		Size             int  `json:"size"`
		Numberofelements int  `json:"numberOfElements"`
		Sort             struct {
			Sorted   bool `json:"sorted"`
			Unsorted bool `json:"unsorted"`
			Empty    bool `json:"empty"`
		} `json:"sort"`
		First bool `json:"first"`
		Empty bool `json:"empty"`
	} `json:"floorsheets"`
	Totaltrades int `json:"totalTrades"`
}

func (n *NewebAPI) GetStocks() ([]nepse.Ticker, error) {
	req, err := n.client.NewRequest(http.MethodGet, All, nil)
	if err != nil {
		return nil, err
	}

	res := &ListedStocks{}
	if _, err := n.client.Do(context.Background(), req, res); err != nil {
		return nil, err
	}

	var stocks []nepse.Ticker

	for _, ticker := range *res {
		stocks = append(stocks, nepse.Ticker{
			Ticker:      ticker.Symbol,
			Companyname: ticker.Securityname,
			Id:          ticker.Securityid,
		})
	}

	return stocks, nil
}

func (n *NewebAPI) GetSectorStock(sector string) ([]nepse.Ticker, error) {
	tickers, err := n.GetStocks()
	if err != nil {
		return nil, err
	}

	var stocks []nepse.Ticker

	for _, ticker := range tickers {
		if ticker.Sector == sector {
			stocks = append(stocks, nepse.Ticker{
				Ticker:      ticker.Ticker,
				Companyname: ticker.Companyname,
				Id:          ticker.Id,
			})
		}
	}

	return stocks, nil
}
