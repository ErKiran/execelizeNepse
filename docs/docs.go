// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/floorsheet": {
            "get": {
                "description": "Get the floorsheet of single stock (Pumper, Dumper, HODLers) in html format using go-echarts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "floorsheet"
                ],
                "summary": "Floorsheet of single the stocks between start and end date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "start",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "end",
                        "name": "end",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ticker",
                        "name": "ticker",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.FloorsheetResult"
                        }
                    }
                }
            }
        },
        "/api/v1/floorsheet/analysis": {
            "get": {
                "description": "Get Pumped/Dumped Stock Top Broker Buy/Sell in html format using go-echarts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "floorsheet"
                ],
                "summary": "Analysis the Floorsheet of all the stocks between start and end date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "start",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "end",
                        "name": "end",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/floorsheet/bulk": {
            "get": {
                "description": "Get Pumped/Dumped Stock Top Broker Buy/Sell in html format using go-echarts(aggregated)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "floorsheet"
                ],
                "summary": "Analysis the Floorsheet of all the stocks between start and end date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "start",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "end",
                        "name": "end",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/controllers.TransactionData"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/fundamental": {
            "get": {
                "description": "This endpoint will create Sectorwise file with key indicators representating certain sectors so that we can compare the performance of the company in same sector",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fundamental"
                ],
                "summary": "Create the fundamental report of the company sectorwise",
                "parameters": [
                    {
                        "type": "string",
                        "description": "sector",
                        "name": "sector",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/mutualfund": {
            "get": {
                "description": "This endpoint will create the Mutual Funds reports about holding, bought and sold stocks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mutualfund"
                ],
                "summary": "Create the Mutual Funds reports about holding, bought and sold stocks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.MutualFund"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "bizmandu.Sector": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "bizmandu.Topstock": {
            "type": "object",
            "properties": {
                "noOfStocks": {
                    "type": "number"
                },
                "ticker": {
                    "type": "string"
                },
                "totalHolding": {
                    "type": "number"
                }
            }
        },
        "bizmandu.Topstockholdings": {
            "type": "object",
            "properties": {
                "portWeight": {
                    "type": "number"
                },
                "qty": {
                    "type": "integer"
                },
                "ticker": {
                    "type": "string"
                }
            }
        },
        "controllers.FloorsheetResult": {
            "type": "object",
            "properties": {
                "buyerAveragePriceMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "buyerQuantityMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "buyerTurnOverMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "sellerAveragePriceMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "sellerQuantityMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "sellerTurnOverMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "ticker": {
                    "type": "string"
                }
            }
        },
        "controllers.MutualFund": {
            "type": "object",
            "properties": {
                "mutualFundKeyMetrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.MutualFundKeyMetrics"
                    }
                },
                "netStockBoughtMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "sectorMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "topHoldingMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "topStockBoughtMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "topStockSoldMap": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "controllers.MutualFundKeyMetrics": {
            "type": "object",
            "properties": {
                "lastTradedPrice": {
                    "type": "number"
                },
                "marketCapatilization": {
                    "type": "number"
                },
                "monthlyNav": {
                    "type": "number"
                },
                "priceVsNav": {
                    "type": "number"
                },
                "sector": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bizmandu.Sector"
                    }
                },
                "ticker": {
                    "type": "string"
                },
                "topStockBought": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bizmandu.Topstock"
                    }
                },
                "topStockHoldings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bizmandu.Topstockholdings"
                    }
                },
                "topStockSold": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bizmandu.Topstock"
                    }
                },
                "totalCompanies": {
                    "type": "integer"
                },
                "totalSector": {
                    "type": "integer"
                },
                "weeklyNav": {
                    "type": "number"
                }
            }
        },
        "controllers.TransactionData": {
            "type": "object",
            "properties": {
                "brokerPercentageShare": {
                    "type": "number"
                },
                "percentageShare": {
                    "type": "number"
                },
                "quantity": {
                    "type": "integer"
                },
                "ticker": {
                    "type": "string"
                },
                "totalQuantity": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
